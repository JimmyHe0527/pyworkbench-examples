# # PyWorkbench and PyMechanical

import os
import pathlib

import pyvista as pv

from ansys.workbench.core import launch_workbench
from ansys.mechanical.core import launch_mechanical

# launch Workbench service on the local machine
workdir = pathlib.Path("__file__").parent
assets = workdir / "assets"
scripts = workdir / "scripts"
agdb = workdir / "agdb"
wb = launch_workbench(release="241", server_workdir=str(workdir.absolute()), client_workdir=str(workdir.absolute()))

# upload a geometry file to the server
wb.upload_file(str(agdb / "two_pipes.agdb"))

# run a Workbench script to create a mechanical system and load geometry
system_name = wb.run_script_file(str((assets / "project.wbjn").absolute()))

# start PyMechanical service for the system and create a PyMechanical client
pymech_port = wb.start_mechanical_server(system_name=system_name)
mechanical = launch_mechanical(start_instance=False, ip='localhost', port=pymech_port)
print(mechanical.project_directory)

# run a Mechanical python script via PyMechanical to mesh/solve the model
with open (scripts / "solve.py") as sf:
    mech_script = sf.read()
print(mechanical.run_python_script(mech_script))

# download a couple of output files from the solver directory
mechanical.download("*solve.out", target_dir=wb.client_workdir)
mechanical.download("*deformation.png", target_dir=wb.client_workdir)

# display the content of the solver output
with open(os.path.join(wb.client_workdir, "solve.out"), "r") as f:
    print(f.read())

# plot the deformation result generated by the solver
pl = pv.Plotter()
pl.add_background_image(os.path.join(wb.client_workdir, "deformation.png"))
pl.show()

# shutdown the Workbench service
mechanical.exit()
wb.exit()
